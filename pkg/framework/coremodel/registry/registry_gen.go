// This file is autogenerated. DO NOT EDIT.
//
// Generated by pkg/framework/coremodel/gen.go
// Run "make gen-cue" from repository root to regenerate.

package registry

import (
	"sort"
	"sync"

	"github.com/google/wire"

	"github.com/grafana/grafana/pkg/coremodel/dashboard"
	"github.com/grafana/grafana/pkg/framework/coremodel"
	"github.com/grafana/thema"
)

// CoremodelSet contains all of the wire-style providers related to coremodels.
var CoremodelSet = wire.NewSet(
	ProvideStatic,
	ProvideGeneric,
)

var (
	genericOnce       sync.Once
	defaultGeneric    *Generic
	defaultGenericErr error
)

// Static is a registry that provides access to individual coremodels via
// explicit method calls, to aid with static analysis.
type Static struct {
	all       []coremodel.Interface
	dashboard *dashboard.Coremodel
}

// type guards
var (
	_ coremodel.Interface = &dashboard.Coremodel{}
)

// Dashboard returns the dashboard coremodel. The return value is guaranteed to
// implement coremodel.Interface.
func (s *Static) Dashboard() *dashboard.Coremodel {
	return s.dashboard
}

func doProvideStatic(lib thema.Library) (*Static, error) {
	var err error
	reg := &Static{}

	reg.dashboard, err = dashboard.New(lib)
	if err != nil {
		return nil, err
	}
	reg.all = append(reg.all, reg.dashboard)

	sort.Slice(reg.all, func(i, j int) bool {
		return reg.all[i].Lineage().Name() < reg.all[j].Lineage().Name()
	})
	return reg, nil
}

func provideGeneric() (*Generic, error) {
	ereg, err := provideStatic(nil)
	if err != nil {
		return nil, err
	}

	genericOnce.Do(func() {
		defaultGeneric, defaultGenericErr = doProvideGeneric(ereg)
	})
	return defaultGeneric, defaultGenericErr
}

func doProvideGeneric(ereg *Static) (*Generic, error) {
	return NewRegistry(
		ereg.Dashboard(),
	)
}
